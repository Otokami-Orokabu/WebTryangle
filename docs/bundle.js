window.onload=async function(){if(console.log("hello world"),!navigator.gpu)throw new Error("WebGPU not supported no this browser.");const e=document.querySelector("canvas");e.width=720,e.height=480;const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("No appropriate GPUAdapter found.");const r=await t.requestDevice(),n=e.getContext("webgpu"),a=navigator.gpu.getPreferredCanvasFormat();n.configure({device:r,format:a});const o=new Float32Array([-.8,-.8,.8,-.8,.8,.8,-.8,-.8,.8,.8,-.8,.8]),i=r.createBuffer({label:"Cell vertics",size:o.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(i,0,o);const s=r.createShaderModule({label:"Cell shader",code:"\n    @vertex\n    fn vertexMain(@location(0) pos: vec2f) ->\n      @builtin(position) vec4f {\n      return vec4f(pos,0,1);\n    }\n    @fragment\n    fn fragmentMain() ->\n      @location(0) vec4f{\n        return vec4f(1,0,0,1);\n      }\n    "}),l=r.createRenderPipeline({label:"Cell pipeline",layout:"auto",vertex:{module:s,entryPoint:"vertexMain",buffers:[{arrayStride:8,attributes:[{format:"float32x2",offset:0,shaderLocation:0}]}]},fragment:{module:s,entryPoint:"fragmentMain",targets:[{format:a}]}}),f=r.createCommandEncoder(),u=f.beginRenderPass({colorAttachments:[{view:n.getCurrentTexture().createView(),loadOp:"clear",clearValue:{r:0,g:0,b:.4,a:1},storeOp:"store"}]});u.setPipeline(l),u.setVertexBuffer(0,i),u.draw(o.length/2),u.end();const c=f.finish();r.queue.submit([c])};